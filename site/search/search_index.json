{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentations DevOps","text":"<p>Cette documentation a pour but de centraliser diff\u00e9rentes informations utiles au m\u00e9tier de DevOps.</p> <p>Elle s'addresse principalement aux apprenants en reconversion pro, le but est de couvrir l'ensemble des principes et technologies indispensables \u00e0 une int\u00e9gration dans le monde de l'entreprise.</p>","tags":["intro"]},{"location":"about/","title":"Information de ce machin","text":"<p>Machin bidule chouhette !!!!</p>"},{"location":"deploy/","title":"Une bonne facon d'essayer de deploy mkdocs","text":"<p>Voici une bonne maniere de deploy ma doc mkdocs sur une instance EC2 \u00e0 essayer d\u00e8s que possible !</p> <p>deploy:   needs: build</p> <p>permissions:     pages: write     id-token: write</p> <p>environment:     name: github-pages static     url: ${{ steps.deployment.outputs.page_url }}</p> <p>runs-on: ubuntu-latest</p> <p>steps:     # 1. V\u00e9rification du code     - name: Checkout code       uses: actions/checkout@v2</p> <pre><code># 2. Set up SSH keys for EC2 access\n- name: Set up SSH key\n  uses: webfactory/ssh-agent@v0.5.3\n  with:\n    ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}  # Assurez-vous d'ajouter votre cl\u00e9 priv\u00e9e dans les Secrets GitHub\n\n# 3. D\u00e9ployer les fichiers sur EC2 via SCP\n- name: Deploy to EC2\n  run: |\n    # Remplacez ces variables par vos valeurs r\u00e9elles\n    SERVER_IP=\"your-ec2-public-ip\"   # Adresse IP publique de votre instance EC2\n    USER=\"ubuntu\"                     # Nom d'utilisateur de votre instance (g\u00e9n\u00e9ralement \"ubuntu\" pour les instances Ubuntu)\n    TARGET_DIR=\"/home/ubuntu/mywebsite\"  # Dossier cible sur votre instance EC2\n\n    # Copier les fichiers n\u00e9cessaires vers l'instance EC2\n    scp -r ./site/* $USER@$SERVER_IP:$TARGET_DIR\n\n# 4. Red\u00e9marrer le serveur web (par exemple, Apache ou Nginx) pour qu'il serve la nouvelle documentation\n- name: Restart server to apply changes\n  run: |\n    ssh $USER@$SERVER_IP &lt;&lt; 'EOF'\n      sudo systemctl restart nginx   # Red\u00e9marre le serveur Nginx (ou Apache selon votre configuration)\n    EOF\n</code></pre> <ol> <li>Configuration des Secrets GitHub Pour que GitHub Actions puisse se connecter \u00e0 votre instance EC2 via SSH, vous devez ajouter une cl\u00e9 SSH priv\u00e9e dans les Secrets GitHub de votre d\u00e9p\u00f4t.</li> </ol> <p>G\u00e9n\u00e9rez une paire de cl\u00e9s SSH sur votre machine locale (si ce n'est pas d\u00e9j\u00e0 fait)      <code>ssh-keygen -t rsa -b 4096 -C \"github-actions\" -f github-actions-key</code></p> <p>Ajoutez la cl\u00e9 publique \u00e0 ~/.ssh/authorized_keys sur votre instance EC2 (par exemple, pour l'utilisateur ubuntu). Ajoutez la cl\u00e9 priv\u00e9e (github-actions-key) comme secret dans GitHub : Allez dans votre d\u00e9p\u00f4t GitHub. Cliquez sur Settings &gt; Secrets &gt; New repository secret. Ajoutez un secret nomm\u00e9 EC2_SSH_PRIVATE_KEY avec la valeur de votre cl\u00e9 priv\u00e9e SSH.</p> <ol> <li>(Optionnel) Configurer Nginx (ou Apache) pour servir la documentation Si votre instance EC2 utilise un serveur web comme Nginx ou Apache, assurez-vous qu'il est correctement configur\u00e9 pour servir la documentation g\u00e9n\u00e9r\u00e9e.</li> </ol>"}]}