# Utiliser l'image de base Python avec Bullseye
FROM python:3.12-bullseye AS base

# Définir l'environnement de travail
WORKDIR /app

COPY requirements.txt .

# Installer Python 3 et pip3 explicitement
RUN apt-get update && apt-get install -y python3 python3-pip && rm -rf /var/lib/apt/lists/*


# Mettre à jour pip
RUN pip3 install --upgrade pip

# Installation de GIT
RUN apt-get update && apt-get install -y git && rm -rf /var/lib/apt/lists/*

# Installer les dépendances nécessaires (boto3, ansible, ansible-lint)
RUN pip3 install boto3 ansible ansible-lint

# Installer la collection Ansible Amazon AWS
RUN ansible-galaxy collection install amazon.aws

# Installer AWS CLI
RUN apt-get update && apt-get install -y awscli && rm -rf /var/lib/apt/lists/*

# Installer les dépendances Python à partir de requirements.txt
RUN pip3 install -r /app/requirements.txt

RUN python3 --version



# Configurer les variables d'environnement AWS
ENV AWS_CONFIG_FILE=/app/.aws/config
ENV AWS_SHARED_CREDENTIALS_FILE=/app/.aws/credentials


# Créer un utilisateur non-root pour une meilleure sécurité (optionnel)
#RUN useradd -ms /bin/bash devuser
#USER devuser

# Stage to allow init mkdocs project
#FROM base as init
#CMD ["mkdocs", "new", "example"]

# Stage to dev locally, pas de copy car on bind mount
FROM base as dev
RUN apt-get update && apt-get install -y neovim && rm -rf /var/lib/apt/lists/*
CMD ["mkdocs", "serve", "-a", "0.0.0.0:8000"]

# On build la doc en elle même
FROM base as build
COPY . .
# Étape 1 : Configurer Git pour considérer le répertoire comme sécurisé
RUN git config --global --add safe.directory .
# Étape 2 : Exécuter mkdocs pour générer la documentation
RUN mkdocs build



FROM nginx:latest
COPY --from=build /app/site /usr/share/nginx/html


# Exposer un port si nécessaire (par exemple pour une application web)
EXPOSE 8000
